#!/bin/bash

# Clear the screen and display ASCII art and message
clear

cat << "EOF"

#  JJJ$$$$$\JJJJJJJJJJJ$$\JJJJJJJJJJJJJJJJJJJJJJJJJJJ$$$$$$$\JJ$$\JJJJJJJJJJJJJJJJJ$$\JJJJJJJJJJJ
#  JJJ\__$$J|JJJJJJJJJJ$$J|JJJJJJJJJJJJJJJJJJJJJJJJJJ$$JJ__$$\J\__|JJJJJJJJJJJJJJJJ$$J|JJJJJJJJJJ
#  JJJJJJ$$J|J$$$$$$\JJ$$$$$$$\JJJ$$$$$$\JJJ$$$$$$$\J$$J|JJ$$J|$$\JJ$$$$$$\JJJ$$$$$$$J|J$$$$$$\JJ
#  JJJJJJ$$J|$$JJ__$$\J$$JJ__$$\JJ\____$$\J$$JJ_____|$$$$$$$\J|$$J|$$JJ__$$\J$$JJ__$$J|$$JJ__$$\J
#  $$\JJJ$$J|$$$$$$$$J|$$J|JJ$$J|J$$$$$$$J|$$J/JJJJJJ$$JJ__$$\J$$J|$$$$$$$$J|$$J/JJ$$J|$$$$$$$$J|
#  $$J|JJ$$J|$$JJJ____|$$J|JJ$$J|$$JJ__$$J|$$J|JJJJJJ$$J|JJ$$J|$$J|$$JJJ____|$$J|JJ$$J|$$JJJ____|
#  \$$$$$$JJ|\$$$$$$$\J$$$$$$$JJ|\$$$$$$$J|\$$$$$$$\J$$$$$$$JJ|$$J|\$$$$$$$\J\$$$$$$$J|\$$$$$$$\J
#  J\______/JJ\_______|\_______/JJ\_______|J\_______|\_______/J\__|J\_______|J\_______|J\_______|
#  JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ
#  JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ
#  JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ

EOF

echo ""
echo "==========================================================================="
echo "                       ✨ JEBAC BIEDE ✨" 
echo "==========================================================================="
echo ""

# Prompt for user input with clear instructions
echo "Liczba rdzeni:"
read -p LICZBA_RDZENI

echo
echo "Liczba rdzeni kontrolująca cluster:"
read -p LICZBA_RDZENI_CLUSTER

echo
echo "Discord webhook:"
read -p DISCORD_WEBHOOK

# Calculate the default core range
DEFAULT_CORES=$((LICZBA_RDZENI - LICZBA_RDZENI_CLUSTER))
if [ "$DEFAULT_CORES" -lt 1 ]; then
  echo "Error: Calculated core range is less than 1. Please check your inputs."
  exit 1
fi

# Load configuration
EXEC_PATH=$HOME/ceremonyclient/node/node-1.4.21.1-linux-amd64
WEBHOOK_URL="$DISCORD_WEBHOOK"
CORES="1..$DEFAULT_CORES"
CHECK_INTERVAL=60

# Define a cleanup function to stop all processes
cleanup() {
  echo "Caught termination signal. Killing all processes."
  killall $(basename "$EXEC_PATH")
  exit 0
}

# Function to send Discord notifications
send_discord_notification() {
  local message="$1"
  local payload=$(jq -n --arg content "$message" '{content: $content}')

  # Send the payload to the Discord webhook
  curl -H "Content-Type: application/json" \
  -d "$payload" \
  "$WEBHOOK_URL"
}

# Trap SIGINT and SIGTERM signals and call cleanup function
trap cleanup SIGINT SIGTERM

# Function to start all processes
start_all_processes() {
  echo "Starting parent process on core 0"
  $EXEC_PATH &

  # Capture the parent process PID
  parent_pid=$!
  echo "Parent process PID: $parent_pid"

  # Start worker processes for the specified cores
  for CORE in $(eval echo {$CORES}); do
    echo "Starting worker process on core $CORE"
    taskset -c $CORE $EXEC_PATH --core $CORE &
  done

  echo "All processes started."
}

# Start all processes initially
start_all_processes

# Monitor the parent process and restart all processes if it stops
while true; do
  sleep $CHECK_INTERVAL  # Check at the specified interval

  # Check if the parent process is running
  if ! kill -0 $parent_pid 2>/dev/null; then
    echo "Parent process has stopped. Restarting all processes."
    send_discord_notification "⚠️ Alert: Parent process has stopped. Restarting all processes at $(date)."
    cleanup  # Cleanup existing processes
    start_all_processes  # Restart all processes
  fi
done
